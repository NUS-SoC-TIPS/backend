generator client {
  provider = "prisma-client-js"

  // Explanation of each of these:
  // postgresqlExtensions: Allows PG extensions, see https://www.postgresql.org/docs/current/sql-createextension.html.
  // fieldReference: Allows you to compare columns in the same table e.g. `where: { quantity: { lte: prisma.product.fields.warnQuantity } }`
  // filteredRelationCount: Allows you to do e.g. select: { _count: { select: { posts: { where: { title: 'Hello!' } } } } } -> returns count
  // extendedWhereUnique: Allows you to include non-unique fields in `where` in addition to min. one unique field.
  // orderByNulls: Allows you to do e.g. `orderBy: { updatedAt: { sort: 'asc', nulls: 'last' } }`
  // clientExtensions: Allows client extensions, see https://www.prisma.io/docs/concepts/components/prisma-client/client-extensions
  previewFeatures = ["postgresqlExtensions", "fieldReference", "filteredRelationCount", "extendedWhereUnique", "orderByNulls", "clientExtensions"]

  // We need this due to generate issue with Prisma and Yarn v2: https://github.com/prisma/prisma/issues/1439
  output = "../src/infra/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id // ID from GitHub
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  githubUsername      String               @map("github_username")
  photoUrl            String               @map("photo_url") // Provided by GitHub
  profileUrl          String               @map("profile_url") // Also provided by GitHub
  name                String
  role                UserRole             @default(NORMAL)
  settings            Settings?
  questionSubmissions QuestionSubmission[]
  roomRecordUsers     RoomRecordUser[]
  roomUsers           RoomUser[]
  students            Student[]
  notifications       Notification[]

  @@map("users")
}

model Settings {
  id                         Int        @id @default(autoincrement())
  createdAt                  DateTime   @default(now()) @map("created_at")
  updatedAt                  DateTime   @updatedAt @map("updated_at")
  userId                     String     @unique @map("user_id")
  hasUpdatedName             Boolean    @map("has_updated_name")
  hasUpdatedPhoto            Boolean    @map("has_updated_photo")
  preferredInterviewLanguage Language?  @map("preferred_interview_language")
  preferredKeyBinding        KeyBinding @default(STANDARD) @map("preferred_key_binding")
  user                       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Room {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  closedAt    DateTime?    @map("closed_at") // Null if not closed
  slug        String // Random word slug generated at app level
  status      RoomStatus   @default(OPEN)
  roomRecords RoomRecord[]
  roomUsers   RoomUser[] // Max 2 room users

  @@map("rooms")
}

model RoomUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roomId    Int      @map("room_id")
  userId    String   @map("user_id")
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_users")
}

// TODO: Look into merging this into Room, if we don't plan to support 2 records per room.
model RoomRecord {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  isRoleplay      Boolean          @default(false) @map("is_roleplay") // TODO: Consider whether to remove this
  duration        Float // In milliseconds. Time taken for both users if general, else time taken for specific turn.
  codeWritten     String           @map("code_written") // Code written by both users if general, else by interviewee
  isSolved        Boolean          @default(false) @map("is_solved") // TODO: Consider whether to remove this
  // Whether the record is long enough + with two participants
  // Ideally, this should be computed from duration and len(roomRecordUsers), but Prisma limitations make the latter hard to query without a raw query
  isValid         Boolean          @default(false) @map("is_valid")
  roomId          Int              @map("room_id")
  questionSlug    String?          @map("question_slug")
  language        Language
  questionSource  QuestionSource?  @map("question_source")
  question        Question?        @relation(fields: [questionSlug, questionSource], references: [slug, source]) // Null if general
  room            Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomRecordUsers RoomRecordUser[]

  @@map("room_records")
}

model Question {
  slug                String
  name                String
  isPremium           Boolean              @map("is_premium")
  difficulty          QuestionDifficulty
  source              QuestionSource
  type                QuestionType
  id                  Int
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  questionSubmissions QuestionSubmission[]
  roomRecords         RoomRecord[]

  @@id([slug, source])
  @@unique([id, source])
  @@map("questions")
}

model Cohort {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  name            String    @unique
  coursemologyUrl String    @unique @map("coursemology_url")
  windows         Window[]
  students        Student[]

  @@map("cohorts")
}

model Student {
  id                     Int             @id @default(autoincrement())
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  userId                 String          @map("user_id")
  cohortId               Int             @map("cohort_id")
  coursemologyName       String          @map("coursemology_name")
  coursemologyProfileUrl String          @map("coursemology_profile_url")
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cohort                 Cohort          @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  results                StudentResult[]
  exclusion              Exclusion?

  @@unique([userId, cohortId])
  @@map("students")
}

model Window {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  startAt          DateTime        @map("start_at")
  endAt            DateTime        @map("end_at")
  cohortId         Int             @map("cohort_id")
  requireInterview Boolean         @map("require_interview")
  numQuestions     Int             @default(7) @map("num_questions")
  cohort           Cohort          @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  studentResults   StudentResult[]
  exclusions       Exclusion[]

  @@map("windows")
}

// Tracks the student's work done for each window
model StudentResult {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  studentId           Int                  @map("student_id")
  windowId            Int                  @map("window_id")
  student             Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  window              Window               @relation(fields: [windowId], references: [id], onDelete: Cascade)
  questionSubmissions QuestionSubmission[]
  roomRecordUsers     RoomRecordUser[]

  @@unique([studentId, windowId])
  @@map("student_results")
}

// 1 pair of users per room record
model RoomRecordUser {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  isInterviewer   Boolean        @map("is_interviewer") // false if record is general, but it's not really used
  notes           String // Notes taken by this user during interview
  userId          String         @map("user_id")
  roomRecordId    Int            @map("room_record_id")
  studentResultId Int?           @map("student_result_id") // Currently assumes that only one window is active at any time.
  roomRecord      RoomRecord     @relation(fields: [roomRecordId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentResult   StudentResult? @relation(fields: [studentResultId], references: [id], onDelete: SetNull)

  @@unique([roomRecordId, userId])
  @@map("room_record_users")
}

model QuestionSubmission {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  codeWritten     String         @map("code_written")
  userId          String         @map("user_id")
  studentResultId Int?           @map("student_result_id") // Currently assumes that only one window is active at any time.
  questionSlug    String         @map("question_slug")
  languageUsed    Language       @map("language_used")
  questionSource  QuestionSource @map("question_source")
  question        Question       @relation(fields: [questionSlug, questionSource], references: [slug, source], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentResult   StudentResult? @relation(fields: [studentResultId], references: [id], onDelete: SetNull)

  @@map("question_submissions")
}

model Exclusion {
  id           Int                    @id @default(autoincrement())
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")
  // Match it to student for now, since each student can only be excluded once
  studentId    Int                    @unique @map("student_id")
  windowId     Int                    @map("window_id")
  reason       String
  student      Student                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  window       Window                 @relation(fields: [windowId], references: [id], onDelete: Cascade)
  notification ExclusionNotification?

  @@map("exclusions")
}

// "Superclass" for all notification types
model Notification {
  id                    Int                    @id @default(autoincrement())
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  userId                String                 @map("user_id")
  isRead                Boolean                @default(false) @map("is_read") // Whether the user has read it before
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  exclusionNotification ExclusionNotification?

  @@map("notifications")
}

model ExclusionNotification {
  notificationId Int          @id @map("notification_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  exclusionId    Int          @unique @map("exclusion_id")
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  exclusion      Exclusion    @relation(fields: [exclusionId], references: [id], onDelete: Cascade)

  @@map("exclusion_notifications")
}

enum UserRole {
  NORMAL
  ADMIN

  @@map("user_role")
}

enum RoomStatus {
  OPEN
  CLOSED_MANUALLY
  CLOSED_AUTOMATICALLY

  @@map("room_status")
}

enum Language {
  // For LeetCode Algorithm + JavaScript + Concurrency questions
  C_PLUS_PLUS
  JAVA
  PYTHON
  PYTHON_THREE
  C
  C_SHARP
  JAVASCRIPT
  RUBY
  SWIFT
  GO
  SCALA
  KOTLIN
  RUST
  PHP
  TYPESCRIPT
  RACKET
  ERLANG
  ELIXIR
  DART

  // For LeetCode Database questions
  MY_SQL
  MS_SQL_SERVER
  ORACLE

  // For LeetCode Shell questions
  BASH

  // For Kattis questions
  APL
  COBOL
  LISP
  F_SHARP
  FORTRAN
  GERBIL
  HASKELL
  JULIA
  OBJECTIVE_C
  OCAML
  PASCAL
  PROLOG

  @@map("language")
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD

  @@map("question_difficulty")
}

// Mainly used for LeetCode questions, which are categorised by types
enum QuestionType {
  ALGORITHMS
  DATABASE
  JAVASCRIPT
  SHELL
  CONCURRENCY

  @@map("question_type")
}

enum QuestionSource {
  LEETCODE
  HACKERRANK
  KATTIS
  CUSTOM

  @@map("question_source")
}

enum KeyBinding {
  STANDARD
  VIM
  VS_CODE

  @@map("key_binding")
}
