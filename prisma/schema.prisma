// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id // ID from GitHub
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  githubUsername String
  photoUrl       String // Provided by GitHub
  profileUrl     String // Also provided by GitHub

  // TODO: Look into supporting Telegram ID and verification

  roomUsers           RoomUser[]
  roomRecordUsers     RoomRecordUser[]
  questionSubmissions QuestionSubmission[]

  @@map("users")
}

model Room {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  slug      String // Random word slug generated at app level
  closedAt  DateTime? // Null if not closed
  status    RoomStatus @default(OPEN)

  roomUsers   RoomUser[] // Max 2 room users
  roomRecords RoomRecord[]

  @@map("rooms")
}

model RoomUser {
  id     Int    @id @default(autoincrement())
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_users")
}

// The following model is designed to handle both general mock interviews and
// interviewee-interviewer roleplay. For roleplay, 2 records will be generated.
model RoomRecord {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isRoleplay      Boolean          @default(false)
  duration        Float // In milliseconds. Time taken for both users if general, else time taken for specific turn.
  language        Language
  codeWritten     String // Code written by both users if general, else by interviewee
  isSolved        Boolean          @default(false) // Ignored if general
  room            Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          Int
  questionSlug    String?
  question        Question?        @relation(fields: [questionSlug], references: [slug]) // Null if general
  roomRecordUsers RoomRecordUser[]

  @@map("room_records")
}

// Can be LeetCode questions or our own custom questions
model Question {
  slug                String               @id // Fixed ID per question
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  id                  Int
  name                String
  difficulty          QuestionDifficulty
  type                QuestionType
  source              QuestionSource
  isPremium           Boolean
  roomRecords         RoomRecord[]
  questionSubmissions QuestionSubmission[]

  @@unique([id, source])
  @@map("questions")
}

// 1 pair of users per room record
model RoomRecordUser {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isInterviewer Boolean // Ignored if record is general
  notes         String // Markdown notes taken during interview
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  roomRecordId  Int
  roomRecord    RoomRecord @relation(fields: [roomRecordId], references: [id])

  @@map("room_record_users")
}

model QuestionSubmission {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  languageUsed Language
  codeWritten  String
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  questionSlug String
  question     Question @relation(fields: [questionSlug], references: [slug])

  @@map("question_submissions")
}

model Window {
  id               Int      @id
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  startAt          DateTime
  endAt            DateTime
  iteration        Int
  requireInterview Boolean

  @@map("windows")
}

enum RoomStatus {
  OPEN
  CLOSED_MANUALLY
  CLOSED_AUTOMATICALLY

  @@map("room_status")
}

enum Language {
  C_PLUS_PLUS
  JAVA
  PYTHON
  PYTHON_THREE
  C
  C_SHARP
  JAVASCRIPT
  RUBY
  SWIFT
  GO
  SCALA
  KOTLIN
  RUST
  PHP
  TYPESCRIPT
  RACKET
  ERLANG
  ELIXIR

  // For shell question
  BASH

  // For database questions
  MY_SQL
  MS_SQL_SERVER
  ORACLE

  @@map("language")
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD

  @@map("question_difficulty")
}

// Based on LeetCode
enum QuestionType {
  ALGORITHMS
  DATABASE
  SHELL
  CONCURRENCY

  @@map("question_type")
}

enum QuestionSource {
  LEETCODE
  HACKERRANK
  KATTIS
  CUSTOM

  @@map("question_source")
}
